#!/usr/bin/env bash
set -euo pipefail

: "${GITEA_URL:?Need GITEA_URL}"
: "${GITEA_TOKEN:?Need GITEA_TOKEN}"
: "${GITEA_OWNER:?Need GITEA_OWNER}"
: "${GITEA_REPO:?Need GITEA_REPO}"

OVERLAY=$1; shift
BASE_DIRS=("$@")

list_dirs() {
  find "$1" -type f -exec dirname {} \; | sed "s|^$1/||" | sort -u
}

list_overlays() {
  base=$1; overlay=$2; t1=$(mktemp); t2=$(mktemp)
  list_dirs "$base" >"$t1"; list_dirs "$overlay" >"$t2"
  comm -12 "$t1" "$t2"
  rm -f "$t1" "$t2"
}

extract_vr(){
  awk -F= '/^version=/{v=$2} /^release=/{r=$2} END{printf "%s-%s",v,r}' "$1"
}

is_overlay_outdated() {
  first=$(printf '%s\n%s' "$2" "$1" | sort -V | head -n1)
  [[ $first == "$2" && $1 != "$2" ]]
}

port_diff(){
  diff -Naur "$1" "$2" || true \
    | sed -e 's/\\/\\\\/g; s/"/\\"/g; s/\r//g; s/\t/\\t/g' \
    | awk '{printf "%s\\n",$0}'
}

issue_exists() {
  title=$1
  curl -sS -H "Authorization: token ${GITEA_TOKEN}" \
    "${GITEA_URL}/api/v1/repos/${GITEA_OWNER}/${GITEA_REPO}/issues?state=open&limit=200" \
  | grep -qF "\"title\":\"${title}\""
}

get_label_id(){
  local name="$1"
  curl -sS -H "Authorization: token ${GITEA_TOKEN}" \
    "${GITEA_URL}/api/v1/repos/${GITEA_OWNER}/${GITEA_REPO}/labels?limit=200" \
    | awk -v filter="$name" '
      BEGIN { RS="\\{" }
      /"id":/ && /"name":/ {
        match($0, /"name"[[:space:]]*:[[:space:]]*"([^"]+)"/, n)
        if (n[1] == filter) {
          match($0, /"id"[[:space:]]*:[[:space:]]*([0-9]+)/, m)
          print m[1]
          exit
        }
      }
    '
}

build_label_json(){
  local ids=() vid aid
  vid=$(get_label_id "version mismatch")
  [[ -n $vid ]] && ids+=("$vid")

  aid=$(get_label_id "automation")
  [[ -n $aid ]] && ids+=("$aid")

  if ((${#ids[@]})); then
    printf ', "labels":[%s]' "$(IFS=,; echo "${ids[*]}")"
  else
    printf ''
  fi
}

create_issue() {
  title=$1; port=$2; parent_version=$3; overlay_version=$4; port_diff=$5;
  parent_repository=$6
  body="### ⚠️ Version Mismatch Detected

**Port:** \`${port}\`

- **Parent version:** [\`${parent_version}\`](https://git.crux.nu/ports/${parent_repository}/src/branch/3.8/${port}/Pkgfile)
- **Overlay version:** [\`${overlay_version}\`](src/branch/3.8/${port}/Pkgfile)

**Diff**:
\`\`\`diff
${port_diff}
\`\`\`

---
This is an automated ticket generated by [overlay_versions.sh](src/branch/3.8/.gitea/scripts/overlay_versions.sh).
_Please verify if this is intentional or if it actually needs updating._"
  body=$(python3 -c 'import json,sys; print(json.dumps(sys.stdin.read()))' <<< "$body")
  labels=$(build_label_json)
  payload=$(printf '{"title":"%s","body":%s%s}' "$title" "$body" "$labels")
  echo "PAYLOAD: $payload" >&2
  response=$(curl -sS -H "Authorization: token ${GITEA_TOKEN}" \
    -H "Content-Type: application/json" -w "%{http_code}" \
    -d "$payload" \
    "${GITEA_URL}/api/v1/repos/${GITEA_OWNER}/${GITEA_REPO}/issues")
  status=${response: -3}
  if [[ $status == 201 ]]; then
    echo "Created a ticket for ${title}"
  else
    echo "Creating a ticket for ${title} failed: HTTP $status — ${response:0:-3}"
  fi
}

main() {
  for b in "${BASE_DIRS[@]}"; do
    repository="/usr/ports/$b"
    list_overlays "$repository" "$OVERLAY" | while read -r port; do
      p1="$repository/$port/Pkgfile"; p2="$OVERLAY/$port/Pkgfile"
      [[ -f $p1 && -f $p2 ]] || continue
      parent_version=$(extract_vr "$p1"); overlay_version=$(extract_vr "$p2")
      parent_repository=${repository#/usr/ports/}
      title="Version mismatch: ${port}"
      if is_overlay_outdated "$parent_version" "$overlay_version"; then
        if issue_exists "$title"; then
          echo "Skipping ${port}, a ticket already exists"
        else
          port_diff=$(port_diff "$p1" "$p2")
          create_issue "$title" "$port" "$parent_version" "$overlay_version" "$port_diff" "$parent_repository"
        fi
      fi
    done
  done
}

main
